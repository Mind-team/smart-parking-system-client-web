{"version":3,"sources":["context/languages/language.enum.ts","hooks/routes/route.hook.ts","pages/Login/Login.styles.ts","context/languages/language.context.ts","pages/Login/Login.page.tsx","hooks/api/driver/driver-api.hook.ts","hooks/http/http.hook.ts","hooks/api/endpoint.hook.ts","pages/Login/Login.wrapper.page.tsx","hooks/auth/auth.hook.ts","pages/Home/Home.page.tsx","pages/Home/Home.container.tsx","App.tsx","index.tsx","hooks/languages/language.hook.ts"],"names":["Language","BaseRoute","Route","auth","login","registration","home","main","history","details","useRoute","Form","styled","div","Dictionary","ENG","pages","phoneNumber","sendConfirmationCodeBtn","sendConfirmationCodePlaceholder","navbar","parkings","profile","RUS","LanguageContext","React","createContext","Login","onLoginClick","onSendCodeClick","isError","dict","useContext","useState","phone","setPhone","code","setCode","isCodeSend","setCodeSend","type","placeholder","valueChange","value","title","click","request","configObject","a","url","Error","method","fetch","body","JSON","stringify","headers","response","json","endpoint","sendConfirmationCode","apiVersion","data","LoginWrapper","driverApi","navigate","useNavigate","accessToken","setAuth","setError","confirmationCode","then","r","Home","HomeContainer","App","route","path","element","to","ReactDOM","render","StrictMode","theme","useTheme","Provider","localStorage","getItem","toString","test","navigator","language","document","getElementById"],"mappings":"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","file":"static/js/main.4de5f167.chunk.js","sourcesContent":["export enum Language {\n  \"RUS\",\n  \"ENG\",\n}\n","interface IBaseRoute {\n  auth: string;\n  home: string;\n  history: string;\n}\n\nconst BaseRoute: IBaseRoute = {\n  auth: \"/auth\",\n  home: \"/home\",\n  history: \"/history\",\n};\n\ninterface IRoute {\n  auth: {\n    login: string;\n    registration: string;\n  };\n  home: {\n    main: string;\n  };\n  history: {\n    main: string;\n    details: string;\n  };\n}\n\nconst Route: IRoute = {\n  auth: {\n    login: BaseRoute.auth + \"/login\",\n    registration: BaseRoute.auth + \"/registration\",\n  },\n  home: {\n    main: BaseRoute.home,\n  },\n  history: {\n    main: BaseRoute.history,\n    details: BaseRoute.history + \"/:id\",\n  },\n};\n\nexport const useRoute = (): IRoute => {\n  return Route;\n};\n","import styled from \"styled-components\";\n\nexport const Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 15%;\n`;\n","import React from \"react\";\nimport { Language } from \"./language.enum\";\n\nexport type DictionaryType = {\n  [title in Language]: {\n    pages: {\n      login: {\n        phoneNumber: string;\n        sendConfirmationCodeBtn: string;\n        sendConfirmationCodePlaceholder: string;\n        login: string;\n      };\n    };\n    navbar: {\n      home: string;\n      history: string;\n      parkings: string;\n      profile: string;\n    };\n  };\n};\n\nexport const Dictionary: DictionaryType = {\n  [Language.ENG]: {\n    pages: {\n      login: {\n        phoneNumber: \"Phone number\",\n        sendConfirmationCodeBtn: \"Code\",\n        login: \"Login\",\n        sendConfirmationCodePlaceholder: \"Confirmation code\",\n      },\n    },\n    navbar: {\n      home: \"Home\",\n      history: \"History\",\n      parkings: \"Parkings\",\n      profile: \"Profile\",\n    },\n  },\n  [Language.RUS]: {\n    pages: {\n      login: {\n        phoneNumber: \"Номер телефона\",\n        sendConfirmationCodeBtn: \"Код\",\n        login: \"Войти\",\n        sendConfirmationCodePlaceholder: \"Код подтверждения\",\n      },\n    },\n    navbar: {\n      home: \"Главная\",\n      history: \"История\",\n      parkings: \"Парковки\",\n      profile: \"Профиль\",\n    },\n  },\n};\n\nexport const LanguageContext = React.createContext(Dictionary[Language.RUS]);\n","import { TextControl, Button } from \"@ermolaev/mind-ui\";\nimport { FC, useContext, useState } from \"react\";\nimport * as S from \"./Login.styles\";\nimport { LanguageContext } from \"../../context/languages\";\n\ninterface ILoginProps {\n  onLoginClick: (phone: string, confirmationCode: string) => void;\n  onSendCodeClick: (phone: string) => void;\n  isError: boolean;\n}\n\nexport const Login: FC<ILoginProps> = ({\n  onLoginClick,\n  onSendCodeClick,\n  isError,\n}) => {\n  const dict = useContext(LanguageContext);\n  const [phone, setPhone] = useState<string>(\"\");\n  const [code, setCode] = useState(\"\");\n  const [isCodeSend, setCodeSend] = useState(false);\n\n  if (isError) {\n    return <>Error</>;\n  }\n\n  const sendCodeHandler = () => {\n    setCodeSend(true);\n    onSendCodeClick(phone);\n  };\n\n  return (\n    <S.Form>\n      <TextControl\n        type={\"text\"}\n        placeholder={dict.pages.login.phoneNumber}\n        valueChange={(value: string) => setPhone(value)}\n      />\n      {isCodeSend && (\n        <TextControl\n          type={\"text\"}\n          placeholder={dict.pages.login.sendConfirmationCodePlaceholder}\n          valueChange={(value: string) => setCode(value)}\n        />\n      )}\n      <Button\n        title={\n          isCodeSend\n            ? dict.pages.login.login\n            : dict.pages.login.sendConfirmationCodeBtn\n        }\n        click={() =>\n          isCodeSend ? onLoginClick(phone, code) : sendCodeHandler()\n        }\n      />\n    </S.Form>\n  );\n};\n","import { useHttp } from \"../../http\";\nimport { LoginDriverRequestDto } from \"./dto/login-driver-request.dto\";\nimport { useEndpoint } from \"../endpoint.hook\";\nimport { LoginDriverResponseDto } from \"./dto/login-driver-response.dto\";\n\nconst request = useHttp();\nconst endpoint = useEndpoint();\n\n// function getCookie(name: string) {\n//   const matches = document.cookie.match(\n//     new RegExp(\n//       \"(?:^|; )\" +\n//         name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, \"\\\\$1\") +\n//         \"=([^;]*)\",\n//     ),\n//   );\n//   return matches ? decodeURIComponent(matches[1]) : undefined;\n// }\n\nconst sendConfirmationCode = async (\n  phoneNumber: LoginDriverRequestDto[\"phoneNumber\"],\n  apiVersion: string,\n) => {\n  return await request<\n    Pick<LoginDriverRequestDto, \"phoneNumber\">,\n    { error?: number; message?: string }\n  >({\n    url: endpoint + apiVersion + \"/driver/send-confirmation-code\",\n    method: \"POST\",\n    body: { phoneNumber },\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n\nconst login = async (data: LoginDriverRequestDto, apiVersion: string) => {\n  return await request<LoginDriverRequestDto, LoginDriverResponseDto>({\n    url: endpoint + apiVersion + \"/driver/login\",\n    method: \"POST\",\n    body: data,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n\nexport const useDriverApi = () => {\n  return {\n    login,\n    sendConfirmationCode,\n  };\n};\n","import { IHttpRequest } from \"./http-request.interface\";\n\nexport const useHttp = () => {\n  return async <Req, Res>(\n    configObject: IHttpRequest<Req>,\n  ): Promise<Res | null> => {\n    if (!configObject || !configObject.url) {\n      throw new Error(\"П\");\n    }\n    if (\n      configObject.method !== \"GET\" &&\n      \"body\" in configObject &&\n      configObject.url\n    ) {\n      try {\n        const response = await fetch(configObject.url, {\n          method: configObject.method,\n          body: JSON.stringify(configObject.body),\n          headers: \"headers\" in configObject ? configObject.headers : {},\n        });\n        return await response.json();\n      } catch (e) {\n        return null;\n      }\n    }\n    try {\n      const response = await fetch(configObject.url, {\n        method: \"GET\",\n        headers: \"headers\" in configObject ? configObject.headers : {},\n      });\n      return await response.json();\n    } catch (e) {\n      throw new Error(\"Что то не так\");\n    }\n  };\n};\n","export const useEndpoint = (): string => {\n  return \"https://smart-parking-system-server.herokuapp.com/api/\";\n};\n","import { Login } from \"./Login.page\";\nimport { FC, useState } from \"react\";\nimport { useDriverApi } from \"../../hooks/api\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useRoute } from \"../../hooks/routes\";\nimport { useAuth } from \"../../hooks/auth\";\n\nexport const LoginWrapper: FC = () => {\n  const driverApi = useDriverApi();\n  const route = useRoute();\n  const navigate = useNavigate();\n  const [auth, setAuth] = useAuth();\n  const [isError, setError] = useState(false);\n\n  const handleLoginClick = (phone: string, confirmationCode: string) => {\n    driverApi\n      .login({ phoneNumber: phone, confirmationCode }, \"v4\")\n      .then((response) => {\n        // if (response && \"error\" in response) {\n        // }\n        if (response && \"accessToken\" in response) {\n          setAuth({ accessToken: response.accessToken });\n          navigate(\"/home\");\n        }\n      });\n  };\n\n  const handleCodeClick = (phone: string) => {\n    driverApi.sendConfirmationCode(phone, \"v4\").then((r) => {\n      if (r && \"error\" in r) {\n        setError(true);\n      }\n    });\n  };\n\n  // if (auth.accessToken) {\n  //   return (\n  //     <Routes>\n  //       <Route element={<Navigate to={route.home.main} />} />\n  //     </Routes>\n  //   );\n  // }\n\n  return (\n    <Login\n      onLoginClick={handleLoginClick}\n      onSendCodeClick={handleCodeClick}\n      isError={isError}\n    />\n  );\n};\n","import { useState } from \"react\";\n\nexport const useAuth = () => {\n  return useState<{ accessToken: string | null }>({ accessToken: null });\n};\n","export const Home = () => {\n  return <>Home</>;\n};\n","import { Home } from \"./Home.page\";\n\nexport const HomeContainer = () => {\n  return <Home />;\n};\n","import { FC } from \"react\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport { useRoute } from \"./hooks/routes\";\nimport { LoginWrapper } from \"./pages/Login\";\nimport { HomeContainer } from \"./pages/Home\";\n\nconst App: FC = () => {\n  const route = useRoute();\n\n  return (\n    <Routes>\n      <Route path={route.auth.login} element={<LoginWrapper />} />\n      <Route path={route.home.main} element={<HomeContainer />} />\n      <Route path=\"*\" element={<Navigate to={route.auth.login} />} />\n    </Routes>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport { Dictionary, LanguageContext } from \"./context/languages\";\nimport { ThemeProvider } from \"styled-components\";\nimport { useTheme } from \"@ermolaev/mind-ui\";\nimport { useLanguage } from \"./hooks/languages\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={useTheme()}>\n      <LanguageContext.Provider value={Dictionary[useLanguage()]}>\n        <Router>\n          <App />\n        </Router>\n      </LanguageContext.Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n","import { Language } from \"../../context/languages\";\n\nexport const useLanguage = (): Language => {\n  if (localStorage.getItem(\"lang\")) {\n    return localStorage.getItem(\"lang\") === Language.RUS.toString()\n      ? Language.RUS\n      : Language.ENG;\n  }\n  if (/^ru\\b/.test(navigator.language)) {\n    return Language.RUS;\n  }\n  return Language.ENG;\n};\n"],"sourceRoot":""}